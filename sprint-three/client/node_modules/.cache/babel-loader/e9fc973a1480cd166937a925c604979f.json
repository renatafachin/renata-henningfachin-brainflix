{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Renata\\\\Documents\\\\Brainstation\\\\renata-henningfachin-brainflix\\\\sprint-two\\\\src\\\\components\\\\MainVideoDetails.js\";\nimport React from 'react';\nimport viewIcon from \"../assets/Icons/SVG/Icon-views.svg\";\nimport likeIcon from \"../assets/Icons/SVG/Icon-likes.svg\";\nimport DataConvert from '../components/DataConvert.js';\nimport Headline from './Headline.js';\n\nconst App = () => {\n  const greeting = 'Hello Function Component!';\n  return React.createElement(Headline, {\n    value: greeting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  });\n};\n\nexport default function mainVideo(props) {\n  const {\n    title,\n    channel,\n    description,\n    views,\n    likes,\n    timestamp\n  } = props; // let newDate;\n  // // Function to transform timestamp from API in a human readable format 'N time ago'\n  // function getDateAgo(timestamp) {\n  //     // Getting the time in milliseconds since the comment was made and converting to seconds\n  //     let secondsSince = (Date.now() - timestamp) / 1000;\n  //     let sinceType;\n  //     // Checking if it passed more than a year since the comment was made. Yes -> will show N year(s) ago\n  //     var valueAgo = Math.floor(secondsSince / 31536000);\n  //     if (valueAgo >= 1) {\n  //         sinceType = 'year';\n  //     } else {\n  //         // it's less than a year, checking if it's more than a month\n  //         valueAgo = Math.floor(secondsSince / 2592000);\n  //         if (valueAgo >= 1) {\n  //             sinceType = 'month';\n  //         } else {\n  //             valueAgo = Math.floor(secondsSince / 86400);\n  //             if (valueAgo >= 1) {\n  //                 sinceType = 'day';\n  //             } else {\n  //                 valueAgo = Math.floor(secondsSince / 3600);\n  //                 if (valueAgo >= 1) {\n  //                     sinceType = \"hour\";\n  //                 } else {\n  //                     valueAgo = Math.floor(secondsSince / 60);\n  //                     if (valueAgo >= 1) {\n  //                         sinceType = \"minute\";\n  //                     } else {\n  //                         // '| 0' to display a int instead a float\n  //                         valueAgo = secondsSince | 0;\n  //                         sinceType = \"second\";\n  //                     }\n  //                 }\n  //             }\n  //         }\n  //     }\n  //     // if it's more than one year/month/day/minute/second add a 's'\n  //     if (valueAgo > 1) {\n  //         sinceType += 's';\n  //     }\n  //     // to replace '0 seconds ago' for 'just now', in case of comments just sent\n  //     if (valueAgo === 0 && sinceType === \"second\") {\n  //         newDate = 'just now';\n  //         return newDate;\n  //     } else {\n  //         newDate = valueAgo + ' ' + sinceType + ' ago';\n  //         return newDate;\n  //     }\n  // };\n\n  return React.createElement(\"div\", {\n    className: \"video__details\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"video__details__title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, title), React.createElement(\"div\", {\n    className: \"video__details-top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"video__details-author-date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, channel), React.createElement(\"h4\", {\n    className: \"video__details-author-date__date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, getDateAgo(timestamp))), React.createElement(\"div\", {\n    className: \"video__details__views-likes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"video__details__icon\",\n    src: viewIcon,\n    alt: \"Views\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    className: \"video__details__nums\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, views), React.createElement(\"img\", {\n    className: \"video__details__icon\",\n    src: likeIcon,\n    alt: \"Likes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    className: \"video__details__nums video__details__nums-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, likes))), React.createElement(\"hr\", {\n    className: \"video__divider\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"video__details__description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, description)), React.createElement(\"h3\", {\n    className: \"video__comments-total\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"3 Comments\"));\n}","map":{"version":3,"sources":["C:/Users/Renata/Documents/Brainstation/renata-henningfachin-brainflix/sprint-two/src/components/MainVideoDetails.js"],"names":["React","DataConvert","Headline","App","greeting","mainVideo","props","title","channel","description","views","likes","timestamp","getDateAgo","viewIcon","likeIcon"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAIA,OAAOC,WAAP,MAAwB,8BAAxB;AAGA,OAAOC,QAAP,MAAqB,eAArB;;AACA,MAAMC,GAAG,GAAG,MAAM;AACd,QAAMC,QAAQ,GAAG,2BAAjB;AACA,SAAO,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CAHD;;AAMA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACrC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA,WAAlB;AAA+BC,IAAAA,KAA/B;AAAsCC,IAAAA,KAAtC;AAA6CC,IAAAA;AAA7C,MAA2DN,KAAjE,CADqC,CAErC;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,uBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCC,KAAvC,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,OAAL,CADJ,EAEI;AAAI,IAAA,SAAS,EAAC,kCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkDK,UAAU,CAACD,SAAD,CAA5D,CAFJ,CADJ,EAKI;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAsC,IAAA,GAAG,EAAEE,QAA3C;AAAqD,IAAA,GAAG,EAAC,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAI,IAAA,SAAS,EAAC,sBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCJ,KAAtC,CAFJ,EAGI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAsC,IAAA,GAAG,EAAEK,QAA3C;AAAqD,IAAA,GAAG,EAAC,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII;AAAI,IAAA,SAAS,EAAC,iDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiEJ,KAAjE,CAJJ,CALJ,CAFJ,EAcI;AAAI,IAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,EAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAC,6BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,WADL,CADJ,CAfJ,EAoBI;AAAI,IAAA,SAAS,EAAC,uBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBApBJ,CADJ;AAwBH","sourcesContent":["import React from 'react';\r\nimport viewIcon from '../assets/Icons/SVG/Icon-views.svg';\r\nimport likeIcon from '../assets/Icons/SVG/Icon-likes.svg';\r\n\r\nimport DataConvert from '../components/DataConvert.js';\r\n\r\n\r\nimport Headline from './Headline.js';\r\nconst App = () => {\r\n    const greeting = 'Hello Function Component!';\r\n    return <Headline value={greeting} />;\r\n};\r\n\r\n\r\nexport default function mainVideo(props) {\r\n    const { title, channel, description, views, likes, timestamp } = props;\r\n    // let newDate;\r\n\r\n    // // Function to transform timestamp from API in a human readable format 'N time ago'\r\n    // function getDateAgo(timestamp) {\r\n\r\n    //     // Getting the time in milliseconds since the comment was made and converting to seconds\r\n    //     let secondsSince = (Date.now() - timestamp) / 1000;\r\n    //     let sinceType;\r\n\r\n    //     // Checking if it passed more than a year since the comment was made. Yes -> will show N year(s) ago\r\n    //     var valueAgo = Math.floor(secondsSince / 31536000);\r\n    //     if (valueAgo >= 1) {\r\n    //         sinceType = 'year';\r\n    //     } else {\r\n    //         // it's less than a year, checking if it's more than a month\r\n    //         valueAgo = Math.floor(secondsSince / 2592000);\r\n    //         if (valueAgo >= 1) {\r\n    //             sinceType = 'month';\r\n    //         } else {\r\n    //             valueAgo = Math.floor(secondsSince / 86400);\r\n    //             if (valueAgo >= 1) {\r\n    //                 sinceType = 'day';\r\n    //             } else {\r\n    //                 valueAgo = Math.floor(secondsSince / 3600);\r\n    //                 if (valueAgo >= 1) {\r\n    //                     sinceType = \"hour\";\r\n    //                 } else {\r\n    //                     valueAgo = Math.floor(secondsSince / 60);\r\n    //                     if (valueAgo >= 1) {\r\n    //                         sinceType = \"minute\";\r\n    //                     } else {\r\n    //                         // '| 0' to display a int instead a float\r\n    //                         valueAgo = secondsSince | 0;\r\n    //                         sinceType = \"second\";\r\n    //                     }\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     // if it's more than one year/month/day/minute/second add a 's'\r\n    //     if (valueAgo > 1) {\r\n    //         sinceType += 's';\r\n    //     }\r\n\r\n    //     // to replace '0 seconds ago' for 'just now', in case of comments just sent\r\n    //     if (valueAgo === 0 && sinceType === \"second\") {\r\n    //         newDate = 'just now';\r\n    //         return newDate;\r\n    //     } else {\r\n    //         newDate = valueAgo + ' ' + sinceType + ' ago';\r\n    //         return newDate;\r\n    //     }\r\n    // };\r\n\r\n\r\n    return (\r\n        <div className=\"video__details\">\r\n            <h1 className=\"video__details__title\">{title}</h1>\r\n            <div className=\"video__details-top\">\r\n                <div className=\"video__details-author-date\">\r\n                    <h3>{channel}</h3>\r\n                    <h4 className=\"video__details-author-date__date\">{getDateAgo(timestamp)}</h4>\r\n                </div>\r\n                <div className=\"video__details__views-likes\">\r\n                    <img className=\"video__details__icon\" src={viewIcon} alt=\"Views\" />\r\n                    <h4 className=\"video__details__nums\">{views}</h4>\r\n                    <img className=\"video__details__icon\" src={likeIcon} alt=\"Likes\" />\r\n                    <h4 className=\"video__details__nums video__details__nums-right\">{likes}</h4>\r\n                </div>\r\n            </div>\r\n            <hr className=\"video__divider\"></hr>\r\n            <span>\r\n                <h4 className=\"video__details__description\">\r\n                    {description}\r\n                </h4>\r\n            </span>\r\n            <h3 className=\"video__comments-total\">3 Comments</h3>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}